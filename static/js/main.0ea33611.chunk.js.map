{"version":3,"sources":["actions/listsActions.js","actions/cardsActions.js","actions/index.js","reducers/listsReducer.js","reducers/index.js","store/index.js","components/TrelloCard.js","components/TrelloActionButton.js","components/TrelloList.js","components/App.js","serviceWorker.js","index.js"],"names":["addList","title","type","CONSTANTS","ADD_LIST","payload","sort","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","DRAG_HAPPENED","addCard","listID","text","ADD_CARD","cardID","initialState","id","concat","cards","listsReducer","state","arguments","length","undefined","action","newList","Object","toConsumableArray","newCard","console","log","map","list","objectSpread","_action$payload","newState","splice","apply","_list$cards","find","card","_listEnd$cards","combineReducers","lists","store","createStore","rootReducer","CardContainer","styled","div","_templateObject","TrelloCard","_ref","index","react_default","a","createElement","react_beautiful_dnd_esm","String","provided","assign","draggableProps","dragHandleProps","ref","innerRef","Card_default","CardContent_default","Typography_default","TrelloActionButton","formOpen","openForm","_this","setState","closeForm","e","handleInputChange","target","value","handleAddList","dispatch","props","handleAddCard","_this$props","renderAddButton","buttonText","buttonTextOpacity","buttonTextColor","buttonTextBackground","onClick","style","styles","openFormButtonGroup","opacity","color","backgroundColor","Icon_default","renderForm","placeholder","buttonTitle","minHeight","padding","marginLeft","marginRight","react_textarea_autosize_esm_browser","autoFocus","onBlur","onChange","resize","width","overflow","outline","border","formButtonGroup","Button_default","onMouseDown","variant","cursor","this","React","Component","display","alignItems","borderRadius","height","paddingLeft","paddingRight","marginTop","connect","ListContainer","TrelloList_templateObject","TrelloList","_templateObject2","droppableId","droppableProps","components_TrelloCard","key","components_TrelloActionButton","ListsContainer","App_templateObject","App","onDragEnd","result","destination","source","direction","components_TrelloList","CssBaseline_default","Boolean","window","location","hostname","match","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ea33611.chunk.js","sourcesContent":["import { CONSTANTS } from \"../actions\";\r\n\r\nexport const addList = title => {\r\n  return {\r\n    type: CONSTANTS.ADD_LIST,\r\n    payload: title\r\n  };\r\n};\r\n\r\nexport const sort = (\r\n  droppableIdStart,\r\n  droppableIdEnd,\r\n  droppableIndexStart,\r\n  droppableIndexEnd,\r\n  draggableId,\r\n  type\r\n) => {\r\n  return {\r\n    type: CONSTANTS.DRAG_HAPPENED,\r\n    payload: {\r\n      droppableIdStart,\r\n      droppableIdEnd,\r\n      droppableIndexEnd,\r\n      droppableIndexStart,\r\n      draggableId,\r\n      type\r\n    }\r\n  };\r\n};\r\n","import { CONSTANTS } from \"../actions\";\r\n\r\nexport const addCard = (listID, text) => {\r\n  return {\r\n    type: CONSTANTS.ADD_CARD,\r\n    payload: { text, listID }\r\n  };\r\n};\r\n","export * from \"./listsActions\";\r\nexport * from \"./cardsActions\";\r\n\r\nexport const CONSTANTS = {\r\n  ADD_CARD: \"ADD_CARD\",\r\n  ADD_LIST: \"ADD_LIST\",\r\n  DRAG_HAPPENED: \"DRAG_HAPPENED\"\r\n};\r\n","import { CONSTANTS } from \"../actions\";\r\n\r\nlet listID = 2;\r\nlet cardID = 6;\r\n\r\nconst initialState = [\r\n  {\r\n    title: \"Last Episode\",\r\n    id: `list-${0}`,\r\n    cards: [\r\n      {\r\n        id: `card-${0}`,\r\n        text: \"we created a static list and a static card\"\r\n      },\r\n      {\r\n        id: `card-${1}`,\r\n        text: \"we used a mix between material UI React and styled components\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: \"This Episode\",\r\n    id: `list-${1}`,\r\n    cards: [\r\n      {\r\n        id: `card-${2}`,\r\n        text: \"we will create our first reducer\"\r\n      },\r\n      {\r\n        id: `card-${3}`,\r\n        text: \"and render many cards on our list with static data\"\r\n      },\r\n      {\r\n        id: `card-${4}`,\r\n        text:\r\n          \"we will also make some little changes I forgot in the last episode (link tags for roboto font and icons,..)\"\r\n      },\r\n      {\r\n        id: `card-${5}`,\r\n        text:\r\n          \"we will also make some little changes I forgot in the last episode (link tags for roboto font and icons,..)\"\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nconst listsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CONSTANTS.ADD_LIST:\r\n      const newList = {\r\n        title: action.payload,\r\n        cards: [],\r\n        id: `list-${listID}`\r\n      };\r\n      listID += 1;\r\n      return [...state, newList];\r\n\r\n    case CONSTANTS.ADD_CARD: {\r\n      const newCard = {\r\n        text: action.payload.text,\r\n        id: `card-${cardID}`\r\n      };\r\n      cardID += 1;\r\n\r\n      console.log(\"action received\", action);\r\n\r\n      const newState = state.map(list => {\r\n        if (list.id === action.payload.listID) {\r\n          return {\r\n            ...list,\r\n            cards: [...list.cards, newCard]\r\n          };\r\n        } else {\r\n          return list;\r\n        }\r\n      });\r\n\r\n      return newState;\r\n    }\r\n\r\n    case CONSTANTS.DRAG_HAPPENED:\r\n      const {\r\n        droppableIdStart,\r\n        droppableIdEnd,\r\n        droppableIndexEnd,\r\n        droppableIndexStart,\r\n        draggableId,\r\n        type\r\n      } = action.payload;\r\n      const newState = [...state];\r\n\r\n      // draggin lists around\r\n      if (type === \"list\") {\r\n        const list = newState.splice(droppableIndexStart, 1);\r\n        newState.splice(droppableIndexEnd, 0, ...list);\r\n        return newState;\r\n      }\r\n\r\n      // in the same list\r\n      if (droppableIdStart === droppableIdEnd) {\r\n        const list = state.find(list => droppableIdStart === list.id);\r\n        const card = list.cards.splice(droppableIndexStart, 1);\r\n        list.cards.splice(droppableIndexEnd, 0, ...card);\r\n      }\r\n\r\n      // other list\r\n      if (droppableIdStart !== droppableIdEnd) {\r\n        // find the list where the drag happened\r\n        const listStart = state.find(list => droppableIdStart === list.id);\r\n        // pull out the card from this list\r\n        const card = listStart.cards.splice(droppableIndexStart, 1);\r\n        // find the list where the drag ended\r\n        const listEnd = state.find(list => droppableIdEnd === list.id);\r\n\r\n        // put the card in the new list\r\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\r\n      }\r\n\r\n      return newState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default listsReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport listsReducer from \"./listsReducer\";\r\n\r\nexport default combineReducers({\r\n  lists: listsReducer\r\n});\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\n\r\nconst CardContainer = styled.div`\r\n  margin: 8px;\r\n`;\r\n\r\nconst TrelloCard = ({ text, id, index }) => {\r\n  return (\r\n    <Draggable draggableId={String(id)} index={index}>\r\n      {provided => (\r\n        <CardContainer\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n        >\r\n          <Card>\r\n            <CardContent>\r\n              <Typography>{text}</Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </CardContainer>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default TrelloCard;\r\n","import React from \"react\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport Textarea from \"react-textarea-autosize\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { connect } from \"react-redux\";\r\nimport { addList, addCard } from \"../actions\";\r\n\r\nclass TrelloActionButton extends React.Component {\r\n  state = {\r\n    formOpen: false,\r\n    text: \"\"\r\n  };\r\n\r\n  openForm = () => {\r\n    this.setState({\r\n      formOpen: true\r\n    });\r\n  };\r\n\r\n  closeForm = e => {\r\n    this.setState({\r\n      formOpen: false\r\n    });\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    this.setState({\r\n      text: e.target.value\r\n    });\r\n  };\r\n\r\n  handleAddList = () => {\r\n    const { dispatch } = this.props;\r\n    const { text } = this.state;\r\n\r\n    if (text) {\r\n      this.setState({\r\n        text: \"\"\r\n      });\r\n      dispatch(addList(text));\r\n    }\r\n\r\n    return;\r\n  };\r\n\r\n  handleAddCard = () => {\r\n    const { dispatch, listID } = this.props;\r\n    const { text } = this.state;\r\n\r\n    if (text) {\r\n      this.setState({\r\n        text: \"\"\r\n      });\r\n      dispatch(addCard(listID, text));\r\n    }\r\n  };\r\n\r\n  renderAddButton = () => {\r\n    const { list } = this.props;\r\n\r\n    const buttonText = list ? \"Add another list\" : \"Add another card\";\r\n    const buttonTextOpacity = list ? 1 : 0.5;\r\n    const buttonTextColor = list ? \"white\" : \"inherit\";\r\n    const buttonTextBackground = list ? \"rgba(0,0,0,.15)\" : \"inherit\";\r\n\r\n    return (\r\n      <div\r\n        onClick={this.openForm}\r\n        style={{\r\n          ...styles.openFormButtonGroup,\r\n          opacity: buttonTextOpacity,\r\n          color: buttonTextColor,\r\n          backgroundColor: buttonTextBackground\r\n        }}\r\n      >\r\n        <Icon>add</Icon>\r\n        <p>{buttonText}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderForm = () => {\r\n    const { list } = this.props;\r\n\r\n    const placeholder = list\r\n      ? \"Enter list title...\"\r\n      : \"Enter a title for this card...\";\r\n\r\n    const buttonTitle = list ? \"Add List\" : \"Add Card\";\r\n\r\n    return (\r\n      <div>\r\n        <Card\r\n          style={{\r\n            minHeight: 85,\r\n\r\n            padding: \"6px 8px 2px\",\r\n            marginLeft: 8,\r\n            marginRight: 8\r\n          }}\r\n        >\r\n          <Textarea\r\n            placeholder={placeholder}\r\n            autoFocus\r\n            onBlur={this.closeForm}\r\n            value={this.state.text}\r\n            onChange={this.handleInputChange}\r\n            style={{\r\n              resize: \"none\",\r\n              width: \"100%\",\r\n\r\n              overflow: \"hidden\",\r\n              outline: \"none\",\r\n              border: \"none\"\r\n            }}\r\n          />\r\n        </Card>\r\n        <div style={styles.formButtonGroup}>\r\n          <Button\r\n            onMouseDown={list ? this.handleAddList : this.handleAddCard}\r\n            variant=\"contained\"\r\n            style={{ color: \"white\", backgroundColor: \"#5aac44\" }}\r\n          >\r\n            {buttonTitle}{\" \"}\r\n          </Button>\r\n          <Icon style={{ marginLeft: 8, cursor: \"pointer\" }}>close</Icon>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return this.state.formOpen ? this.renderForm() : this.renderAddButton();\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  openFormButtonGroup: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    cursor: \"pointer\",\r\n    borderRadius: 3,\r\n    height: 36,\r\n    marginLeft: 8,\r\n\r\n    paddingLeft: 10,\r\n    paddingRight: 10\r\n  },\r\n  formButtonGroup: {\r\n    marginTop: 8,\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    marginLeft: 8\r\n  }\r\n};\r\n\r\nexport default connect()(TrelloActionButton);\r\n","import React from \"react\";\r\nimport TrelloCard from \"./TrelloCard\";\r\nimport TrelloActionButton from \"./TrelloActionButton\";\r\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ListContainer = styled.div`\r\n  background-color: #dfe3e6;\r\n  border-radius: 3px;\r\n  width: 300px;\r\n  padding: 8px;\r\n  height: 100%;\r\n  margin: 0 8px 0 0;\r\n`;\r\n\r\nconst Lists = styled.div`\r\n  height: 100%;\r\n`;\r\n\r\nconst TrelloList = ({ title, cards, listID, index }) => {\r\n  return (\r\n    <Draggable draggableId={String(listID)} index={index}>\r\n      {provided => (\r\n        <ListContainer\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n        >\r\n          <Droppable droppableId={String(listID)} type=\"card\">\r\n            {provided => (\r\n              <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                <h4>{title}</h4>\r\n\r\n                {cards.map((card, index) => (\r\n                  <TrelloCard\r\n                    key={card.id}\r\n                    text={card.text}\r\n                    id={card.id}\r\n                    index={index}\r\n                  />\r\n                ))}\r\n                {provided.placeholder}\r\n                <TrelloActionButton listID={listID} />\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </ListContainer>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default TrelloList;\r\n","import React, { Component } from \"react\";\r\nimport TrelloList from \"./TrelloList\";\r\nimport { connect } from \"react-redux\";\r\nimport TrelloActionButton from \"./TrelloActionButton\";\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nimport { sort } from \"../actions\";\r\n\r\nconst ListsContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nclass App extends Component {\r\n  onDragEnd = result => {\r\n    const { destination, source, draggableId, type } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    this.props.dispatch(\r\n      sort(\r\n        source.droppableId,\r\n        destination.droppableId,\r\n        source.index,\r\n        destination.index,\r\n        draggableId,\r\n        type\r\n      )\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { lists } = this.props;\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <h2>Hello Youtube</h2>\r\n        <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\r\n          {provided => (\r\n            <ListsContainer\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              {lists.map((list, index) => (\r\n                <TrelloList\r\n                  listID={list.id}\r\n                  key={list.id}\r\n                  title={list.title}\r\n                  cards={list.cards}\r\n                  index={index}\r\n                />\r\n              ))}\r\n              {provided.placeholder}\r\n              <TrelloActionButton list />\r\n            </ListsContainer>\r\n          )}\r\n        </Droppable>\r\n        <CssBaseline />\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  lists: state.lists\r\n});\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}